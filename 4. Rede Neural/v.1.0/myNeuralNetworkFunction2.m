function [y1,xf1,xf2] = myNeuralNetworkFunction2(x1,x2,xi1,xi2)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 19-Oct-2017 16:41:05.
% 
% [y1,xf1,xf2] = myNeuralNetworkFunction(x1,x2,xi1,xi2) takes these arguments:
%   x = 2xTS matrix, input #1
%   1 = 1xTS matrix, input #2
%   xi1 = 2x5 matrix, initial 5 delay states for input #1.
%   xi2 = 1x5 matrix, initial 5 delay states for input #2.
% and returns:
%   y = 1xTS matrix, output #1
%   xf1 = 2x5 matrix, final 5 delay states for input #1.
%   xf2 = 1x5 matrix, final 5 delay states for input #2.
% where TS is the number of timesteps.

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [65.01;-158.54];
  x1_step1_gain = [0.0404122044857547;0.00489380444357444];
  x1_step1_ymin = -1;
  
  % Input 2
  x2_step1_xoffset = -7.61;
  x2_step1_gain = 0.0274386061188092;
  x2_step1_ymin = -1;
  
  % Layer 1
  b1 = [-2.0918977933778589;-2.6896072717723358;2.2328502613239247;1.8114808859629468;0.16862405259118141;-2.329882219388804;-0.43274269658931019;3.1194089964142346;0.4150807076717451;0.23360306932311176];
  IW1_1 = [-2.5444028734413906 -0.28284168603265891 0.034761568936883425 0.30837231962865785 -0.094205673135933837 -1.6441604835853822 -0.058980500204961553 1.4659695282186236 2.23501184641743 0.16850374042341265;-0.21960786537655602 1.677462739883816 2.2099449641065658 -0.91741193704352419 2.3032524435241499 -1.9655020116462327 0.79960459936696227 2.619408830106337 1.9606411390366076 -1.5872777760586976;-1.6738868950765897 -0.90427568534499381 -0.44999175373776923 -2.370898140139563 -1.5449815108472882 0.72524102163525128 -0.057951817380571341 0.55885675202489749 -0.070695560853583569 1.624927477603054;-0.51146056050684441 0.81852083552243293 3.2889414499412193 2.5259751020129984 -3.0423423960418496 -1.7543778219529294 0.98905415949688713 -3.2668518462959537 1.3531291693675453 0.4956160167610309;1.3468976032351623 -0.70276673688447988 -0.29676334601378213 -0.2379473560494432 2.0423901754861142 -0.17130663755608819 -2.6270639599392909 0.57810078630942896 0.11663795275107121 -0.047437120855426354;3.5157842107858337 0.11697631051752935 -3.3154204385116866 0.43000743469774355 -0.46234049513085607 0.037536199395019343 0.018251866798168662 -3.2327825606514216 1.1580494678740088 0.96672530953845581;2.4625208723480614 -1.6490252945861441 -0.13708769471373014 1.053154654271389 0.89076725824441882 0.28940568467590988 -0.12877117463275323 -0.92135662104585736 -1.8216030056495067 -2.1431425014725773;-3.0996778256817734 1.1883193034044151 4.7841161538132368 -0.82286067115545058 1.7948798531929511 1.7661610624255639 0.42512868823532207 6.7407328287391435 0.13191853318501917 1.3595519957032431;-3.0437753419396878 0.084616647132320727 0.56417643108096038 0.062430663057784191 -0.09337724666968561 -0.46683702222515405 2.2567743612687718 0.76153068909994093 0.062677281618665787 0.11518319567239352;-2.3851394812086961 -0.27375668367073053 1.7432870055408627 0.28055080542173566 0.98459896443940753 -0.53321847449866822 -0.85642167326534413 0.22771313862941595 0.62122041209221579 0.11539416799758095];
  IW1_2 = [-0.94326187068875456 -1.0930444068227658 0.45602246039851646 -0.23316109882499408 -0.73796294231605386;1.2772523253253099 2.5696732844191117 -1.2209169295233628 -2.0358328271832478 -1.4285295634649067;4.8202124226566934 0.02657434609122801 -1.7373550945445937 -0.75222968763568976 1.6369013318718728;-3.702184383999672 1.1505096171026759 -1.3054114474478868 -2.9919769183828313 -1.1447008932511389;-2.0153162611585094 -1.99766609162549 -0.97518701385028494 3.2912121286844389 0.2994314628697119;2.4781786196234119 1.1694872571120687 -1.2616891524543932 1.0651253714529862 -4.275446483011911;-1.8519653093745339 4.3068890808396842 3.2763218993534498 1.7106331709751859 0.12452116233749153;0.35894421556176564 1.3456447028659237 0.51279539931722795 -1.6543862106947043 -0.10175862051181957;-0.32820634762877487 2.0668457181102222 -0.8593858317534977 -2.791802857672967 0.64194886622902247;4.4865348370190796 -3.9168667146295522 -0.60597627647934915 1.2534647341988079 -0.52027919723210025];
  
  % Layer 2
  b2 = -0.19571901015606;
  LW2_1 = [-0.1355500991922966 0.027303875067065338 0.060648718278315035 -0.0340352221446951 -0.349609092936494 -0.13465543968208069 0.013272128326454254 0.02892849734401285 -0.24620712476069831 0.4177881434226618];
  
  % Output 1
  y1_step1_ymin = -1;
  y1_step1_gain = 0.0274386061188092;
  y1_step1_xoffset = -7.61;
  
  % ===== SIMULATION ========
  
  % Dimensions
  TS = size(x1,2); % timesteps
  
  % Input 1 Delay States
  xd1 = mapminmax_apply(xi1,x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
  xd1 = [xd1 zeros(2,1)];
  
  % Input 2 Delay States
  xd2 = mapminmax_apply(xi2,x2_step1_gain,x2_step1_xoffset,x2_step1_ymin);
  xd2 = [xd2 zeros(1,1)];
  
  % Allocate Outputs
  y1 = zeros(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Rotating delay state position
    xdts = mod(ts+4,6)+1;
  
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1_gain,x2_step1_xoffset,x2_step1_ymin);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2 3 4 5]-1,6)+1),10,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2 3 4 5]-1,6)+1),5,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
  end
  
  % Final delay states
  finalxts = TS+(1: 5);
  xits = finalxts(finalxts<=5);
  xts = finalxts(finalxts>5)-5;
  xf1 = [xi1(:,xits) x1(:,xts)];
  xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
  x = bsxfun(@minus,y,settings_ymin);
  x = bsxfun(@rdivide,x,settings_gain);
  x = bsxfun(@plus,x,settings_xoffset);
end
